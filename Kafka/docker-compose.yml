version: "3.9"
services:
  zookeeper:
    image: zookeeper:3.8.0
    container_name: zookeeper-docker
    hostname: zookeeper # hostname kafkada kullanılacak amacı ise zookeeper'ın container içindeki ismiyle iletişim kurabilmesi
    ports:
      - "2181:2181"
    networks:
      - kafka_network

  kafka-server-1:
    image: "bitnami/kafka:3.3.1"
    container_name: kafka-container-1
    hostname: kafka-1
    depends_on:
      - zookeeper # kafka zookeeper'a bağlı olduğu için önce zookeeper'ın çalışıyor olması gerekiyor.
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,PLAINTEXT_HOST://:9093"  
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      # Eğer VM makine üzerinde çalıştırılıyorsa localhost yerine external ip adresi yazılmalıdır.
      # KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://23.43.321:9092,PLAINTEXT_HOST://localhost:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka-1:9093" 
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181/kafka-1
      ALLOW_PLAINTEXT_LISTENER: "yes"
    networks:
      - kafka_network

  # schema-registry:
  #     image: bitnami/schema-registry:latest
  #     container_name: schema-registry-docker
  #     ports:
  #       - "8081:8081"
  #     environment:
  #       - SCHEMA_REGISTRY_KAFKA_BROKERS=PLAINTEXT://kafka-1:9093
  #       - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
  #       # {"type": "record","name": "Kisi","fields": [{"name": "ad", "type": "string"},{"name": "yas", "type": "int"}]}
  #       # http://localhost:8081/subjects/
  #       # http://localhost:8081/subjects/Kisi/versions/1
  #     depends_on:
  #       - kafka-server-1
  #     networks:
  #       - kafka_network
      
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:master
    ports:
      - 8080:8080 # Changed to avoid port clash with akhq
    depends_on:
      - kafka-server-1
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:9093
      # KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - kafka_network

networks:
  kafka_network:
    driver: bridge

# 1  nano docker-compose.yml
# 2  sudo apt update
# 3  sudo apt upgrade
# 4  sudo apt install docker.io
# 5  sudo apt install docker-compose

# 6  sudo docker-compose up -d

# Kafkanın içine girmek için
# sudo docker exec -it kafka-container-1 bash

# Tek nodlu kafka clusterı
# kafka-topics.sh --create --topic test --replication-factor 1 --partitions 2 --bootstrap-server localhost:9092

# En az 3 nodlu kafka clusterı
# kafka-topics.sh --create --topic ornek --partitions 3 --replication-factor 3 --bootstrap-server localhost:9092

# Topic listeleme ve topic hakkında bilgi alma
# kafka-topics.sh --list --bootstrap-server localhost:9092
# kafka-topics.sh --describe --topic ornek --bootstrap-server localhost:9092

# topic silme
# kafka-topics.sh --delete --topic ornek --bootstrap-server localhost:9092

# Producer mesajı gönderme
# kafka-console-producer.sh --topic test --bootstrap-server localhost:9092

# Consumer mesajı okuma
# kafka-console-consumer.sh --topic test --from-beginning --bootstrap-server localhost:9092